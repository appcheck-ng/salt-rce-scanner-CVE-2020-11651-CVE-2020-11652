
from .default_css import css

def unicode_from_unknown(s) :
    """
    Silently tries to salvage the ascii chars from a string of unknown encoding if unicode cannot be parsed.
    """
    try :
        return unicode(s)
    except :
        pass

    return coerce_to_ascii(s)

def coerce_to_ascii(s) :
    """
    Forces a string to ascii chars, ignoring other characters.
    """
    # We dont need this anymore
    return s

class Table:
    def __init__(self,headings_list):

        self.columns = len(headings_list)

        head = " <table width=\"100%\"><thead><tr>"
        for heading in headings_list:
            head +=  "<th scope=\"col\" align=\"left\" valign =\"top\">{0}</th>".format(heading)

        head += "</tr></thead>"

        self.table_html = head

    def add_row(self,*args):
        row = "<tr valign='top'>"
        for data in args:

            data = coerce_to_ascii(data)
            data = str(data)
            row += "<td>{0}</td>".format(data)

        row +="</tr>"
        self.table_html += row

    def get_table_html(self):
        return self.table_html + "</table>"



class HTMLDoc:
    def __init__(self,title="Report",css=css):

        self.document_title = title

        self.head = ""
        self.css =  css
        self.body = ""


    def add_scriptcode(self,code):
        self.head += "<script>" + code + "</script>"


    def add_html(self,html):
        self.body += html


    def get_document(self):
        doc = "<html>"
        doc += "<title>{0}</title>".format(self.document_title)
        doc += "<head>{0}</head>".format(self.head)
        doc += '<style type="text/css">{0}</style>'.format(self.css)
        doc += "<body>{0}</body>".format(self.body)
        doc += "</html>"
        return doc


